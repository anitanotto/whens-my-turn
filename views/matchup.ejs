<html>
<head>
    <title>When's My Turn?</title>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
    <link rel="stylesheet" href="https://fonts.xz.style/serve/inter.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@exampledev/new.css@1.1.2/new.min.css">
    <link rel="stylesheet" href="/css/main.css">
    <script defer src="/js/main.js"></script>
<head>
<body>
    <header id="<%= game %>">
        <h1>When's My Turn in <%=game.replaceAll('_',' ')%>?</h1>
        <nav>
            <a href="/">Home</a><span>&nbsp;&nbsp;&nbsp;&nbsp;</span>
            <a href="/api">API</a><span>&nbsp;&nbsp;&nbsp;&nbsp;</span>
            <span>Data from </span><a href="https://www.dustloop.com/w/">Dustloop</a>
        </nav>

    <span>I'm </span>
    <select id="p1">
    <% for(let character of characters) { %>
        <% character = character.split('_').join(' ') %>
        <option <% if (character === p1name) { %>selected<% } %> ><%=character%></option>
    <% } %>
    </select>
    <span> vs. </span>
    <select id="p2">
    <% for(let character of characters) { %>
        <% character = character.split('_').join(' ') %>
        <option <% if (character === p2name) { %>selected<% } %> ><%=character%></option>
    <% } %>
    </select>
    <a id="charSelect" href="<%=`/matchup/${game}/${characters[0]}/${characters[1]}`%>"><button>When's my turn?</button></a>

    </header>


    <table>
        <% for (const move of Object.keys(p2)) { %>
            <% if (p2[move].onBlock != undefined && typeof p2[move].onBlock === 'number') { %>
                <% const onBlock = p2[move].onBlock %>
                <% const reversals = [] %>
                <% let punishes = [] %>
                <% const filters = ['air', 'aerial', '(2)', 'j.', 'kachoufuugetsu'] %>
                <% let p1moves = Object.keys(p1).filter(e => !p1[e].followup && !filters.some(f => e.toLowerCase().includes(f))) %>
                <% p1moves = p1moves.filter(e => typeof p1[e].startup === 'number') %>
                <% for (const punish of p1moves) { %>
                    <% if ((onBlock + p1[punish].startup) === 0) { %>
                        <% reversals.push(punish) %>
                        <% p1moves = p1moves.filter(e => typeof p1[e] === 'number') %>
                    <% } else if ((onBlock + p1[punish].startup) <= 0) { %>
                        <% punishes.push(punish) %>
                    <% } %>

                    <% if ((punishes.length + reversals.length) === p1moves.length) { %>
                        <% punishes = ['anything'] %>
                    <% } %>
                <% } %>

                <% if (punishes.length || reversals.length) { %>
                    <% if (reversals.length) { %>
                        <tr><td class="thumbnail"><img src="<%=p2[move].img%>"></td><td><h4>If you block <%=move%> you can reversal:</h4><p><%= reversals.join(', ') %></p><% if (punishes.length) { %><p><h4>Or punish with:</h4><%=punishes.join(', ')%></p><% } %></td></tr>
                    <% } else { %>
                        <tr><td class="thumbnail"><img src="<%=p2[move].img%>"></td><td><h4>If you block <%=move%> you can punish with:</h4><p><%= punishes.join(', ') %></p></td></tr>
                    <% } %>
                <% } %>
            <% } %>
        <% } %>
    </table>

</body>
</html>
